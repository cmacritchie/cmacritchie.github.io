{"version":3,"file":"static\\development\\pages\\framework\\node.js","sources":["webpack:///./HOC/mainLayout.js","webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js","webpack:///delegated ./node_modules/react/index.js from dll-reference dll_ef0ff7c60362f24a921f","webpack:///./pages/framework/node.js","webpack:///external \"dll_ef0ff7c60362f24a921f\""],"sourcesContent":["\r\nconst mainLayout =({ page }) => Page => {\r\n    return () => (\r\n    <>\r\n        <div className=\"container\">\r\n            <header className=\"headster\">\r\n                <h1 className=\"headster__text-box\">{page}</h1>\r\n            </header>\r\n        \r\n            <div className=\"content\">\r\n                <Page />\r\n            </div>\r\n\r\n    </div>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default mainLayout","\n    (window.__NEXT_P=window.__NEXT_P||[]).push([\"/framework/node\", function() {\n      var mod = require(\"C:\\\\Users\\\\747049\\\\Desktop\\\\craigio\\\\pages\\\\framework\\\\node.js\")\n      if(module.hot) {\n        module.hot.accept(\"C:\\\\Users\\\\747049\\\\Desktop\\\\craigio\\\\pages\\\\framework\\\\node.js\", function() {\n          if(!next.router.components[\"/framework/node\"]) return\n          var updatedPage = require(\"C:\\\\Users\\\\747049\\\\Desktop\\\\craigio\\\\pages\\\\framework\\\\node.js\")\n          next.router.update(\"/framework/node\", updatedPage)\n        })\n      }\n      return mod\n    }]);\n  ","module.exports = (__webpack_require__(/*! dll-reference dll_ef0ff7c60362f24a921f */ \"dll-reference dll_ef0ff7c60362f24a921f\"))(\"./node_modules/react/index.js\");","// import React from 'react'\r\nimport mainLayout from '../../HOC/mainLayout'\r\n// import \"../css/style.css\"\r\n\r\nconst Node = () => {\r\n    return (\r\n        <>\r\n            <p>\r\n                I started using Node.js after I became familiar with React. I liked how \r\n                versatile it was and how easy it was to set up a server using the \r\n                <strong>Express</strong> framework. \r\n            </p>\r\n            <p>\r\n                From there I started building <strong>RESTful APIs</strong> and tested my Routes\r\n                using Postman. I found Postman really useful because you could make requests and set \r\n                up scripts which made testing authorized routes a lot easier. \r\n            </p>\r\n            <p>\r\n                I eventually set up authorization routes for creating users, encrypting their password using\r\n                the bcrypt library, and storing users in a mondodb database using Mongoose ODM. users were \r\n                assigned JSON Web Tokens (JWT) to authorize access to protected routes. In a different project\r\n                I used the passport.js library to leverage a google strategy allowing users to login to the application\r\n                using google authentication. I added an extra layer of authentication to only allow users on a \r\n                whitelist to have login priveleges.\r\n            </p>\r\n            <p> \r\n                I really like using node and I found installing extra libraries using NPM a great tool for \r\n                scaffolding parts which were tricky to do.\r\n            </p>\r\n            <p>\r\n                For my next steps I am hoping to use Redis-cache and further improve my knowledge of \r\n                route testing using JEST.\r\n            </p>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst details = {\r\n    page: 'Node.js'\r\n  }\r\n\r\nexport default mainLayout(details)(Node)\r\n","module.exports = dll_ef0ff7c60362f24a921f;"],"mappings":";;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAeA;AAhBA;AACA;AAiBA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;AC1CA;;;;A","sourceRoot":""}
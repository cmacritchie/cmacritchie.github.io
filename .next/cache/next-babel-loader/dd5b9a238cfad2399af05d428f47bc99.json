{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\747049\\\\Desktop\\\\craigio\\\\pages\\\\framework\\\\node.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import React from 'react'\nimport mainLayout from '../../HOC/mainLayout'; // import \"../css/style.css\"\n\nconst Node = () => {\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"I started using Node.js after I became familiar with React. I liked how versatile it was and how easy it was to set up a server using the\", __jsx(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Express\"), \" framework.\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"From there I started building \", __jsx(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"RESTful APIs\"), \" and tested my Routes using Postman. I found Postman really useful because you could make requests and set up scripts which made testing authorized routes a lot easier.\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"I eventually set up authorization routes for creating users, encrypting their password using the bcrypt library, and storing users in a mondodb database using Mongoose ODM. users were assigned JSON Web Tokens (JWT) to authorize access to protected routes. In a different project I used the passport.js library to leverage a google strategy allowing users to login to the application using google authentication. I added an extra layer of authentication to only allow users on a whitelist to have login priveleges.\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"I really like using node and I found installing extra libraries using NPM a great tool for scaffolding parts which were tricky to do.\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"For my next steps I am hoping to use Redis-cache and further improve my knowledge of route testing using JEST.\"));\n};\n\nconst details = {\n  page: 'Node.js'\n};\nexport default mainLayout(details)(Node);","map":{"version":3,"sources":["C:/Users/747049/Desktop/craigio/pages/framework/node.js"],"names":["mainLayout","Node","details","page"],"mappings":";;;AAAA;AACA,OAAOA,UAAP,MAAuB,sBAAvB,C,CACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,SACI,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kJAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,gBADJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADlC,6KANJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ygBAXJ,EAmBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6IAnBJ,EAuBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHAvBJ,CADJ;AA+BH,CAhCD;;AAkCA,MAAMC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE;AADM,CAAhB;AAIA,eAAeH,UAAU,CAACE,OAAD,CAAV,CAAoBD,IAApB,CAAf","sourcesContent":["// import React from 'react'\r\nimport mainLayout from '../../HOC/mainLayout'\r\n// import \"../css/style.css\"\r\n\r\nconst Node = () => {\r\n    return (\r\n        <>\r\n            <p>\r\n                I started using Node.js after I became familiar with React. I liked how \r\n                versatile it was and how easy it was to set up a server using the \r\n                <strong>Express</strong> framework. \r\n            </p>\r\n            <p>\r\n                From there I started building <strong>RESTful APIs</strong> and tested my Routes\r\n                using Postman. I found Postman really useful because you could make requests and set \r\n                up scripts which made testing authorized routes a lot easier. \r\n            </p>\r\n            <p>\r\n                I eventually set up authorization routes for creating users, encrypting their password using\r\n                the bcrypt library, and storing users in a mondodb database using Mongoose ODM. users were \r\n                assigned JSON Web Tokens (JWT) to authorize access to protected routes. In a different project\r\n                I used the passport.js library to leverage a google strategy allowing users to login to the application\r\n                using google authentication. I added an extra layer of authentication to only allow users on a \r\n                whitelist to have login priveleges.\r\n            </p>\r\n            <p> \r\n                I really like using node and I found installing extra libraries using NPM a great tool for \r\n                scaffolding parts which were tricky to do.\r\n            </p>\r\n            <p>\r\n                For my next steps I am hoping to use Redis-cache and further improve my knowledge of \r\n                route testing using JEST.\r\n            </p>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst details = {\r\n    page: 'Node.js'\r\n  }\r\n\r\nexport default mainLayout(details)(Node)\r\n"]},"metadata":{},"sourceType":"module"}